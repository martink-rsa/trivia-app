const clientIo = require('socket.io-client');
const { setupDatabase, mockRooms, mockUsers } = require('./fixtures/db');
const Room = require('../models/room.model');
const User = require('../models/user.model');
const { server } = require('../index');

const Error = require('../shared/errors');

let socket: any;

// Currently have to add a setTimeout in each of the tests to prevent
// the socket from disconnecting. This unfortunately adds a delay to
// each of the tests. If the duration is too low, it will cause errors.
const TIMEOUT_DURATION = 350;

beforeEach(async () => {
  setupDatabase();
  socket = clientIo.connect(`http://localhost:3011`, {
    'reconnection delay': 0,
    'reopen delay': 0,
    'force new connection': true,
    transports: ['websocket'],
  });
});
 it('should get the correct error when no room is provided', (done) => {
      socket.emit('attemptJoin', { username: 'USERNAME' }, (callback) => {
        expect(callback).toMatchObject(Error.noRoom);
      });
      // Needed to prevent test timeout
      setTimeout(() => {
        done();
      }, TIMEOUT_DURATION);
    });
    it('should get the correct error when no room is provided', (done) => {
      socket.emit('attemptJoin', { username: 'USERNAME', room: 'ROO#M!' }, (callback) => {
        expect(callback).toMatchObject(Error.invalidRoom);
      });
      expect.assertions(1);

      // Needed to prevent test timeout
      setTimeout(() => {
        done();
      }, TIMEOUT_DURATION);
    });
  });
  socket.disconnect();
  done();
});

afterAll(() => {
  server.close();
});

xdescribe('attemptJoin event', () => {
  describe('Username', () => {
    it('should get the correct error when no username is provided', (done) => {
      socket.emit('attemptJoin', {}, (callback) => {
        expect(callback).toMatchObject(Error.noUsername);
      });
      expect.assertions(1);

      // Needed to prevent test timeout
      setTimeout(() => {
        done();
      }, TIMEOUT_DURATION);
    });
    it('should get the correct error when username is invalid', (done) => {
      socket.emit('attemptJoin', { username: 'USERNAME!@$' }, (callback) => {
        expect(callback).toMatchObject(Error.invalidUsername);
      });
      expect.assertions(1);

      // Needed to prevent test timeout
      setTimeout(() => {
        done();
      }, TIMEOUT_DURATION);
    });
    it('should get the correct error when username is taken', (done) => {
      socket.emit('attemptJoin', { username: mockUsers[0].username, room: 'ABCDE' }, (callback) => {
        expect(callback).toMatchObject(Error.usernameUnavailable);
      });
      expect.assertions(1);

      // Needed to prevent test timeout
      setTimeout(() => {
        done();
      }, TIMEOUT_DURATION);
    });
  });
  describe('Room', () => {
    it('should get the correct error when no room is provided', (done) => {
      socket.emit('attemptJoin', { username: 'USERNAME' }, (callback) => {
        expect(callback).toMatchObject(Error.noRoom);
      });
      // Needed to prevent test timeout
      setTimeout(() => {
        done();
      }, TIMEOUT_DURATION);
    });
    it('should get the correct error when no room is provided', (done) => {
      socket.emit('attemptJoin', { username: 'USERNAME', room: 'ROO#M!' }, (callback) => {
        expect(callback).toMatchObject(Error.invalidRoom);
      });
      expect.assertions(1);

      // Needed to prevent test timeout
      setTimeout(() => {
        done();
      }, TIMEOUT_DURATION);
    });
  });
  describe('Join success', () => {
    it('should add a user to a room if correct details are provided', (done) => {
      socket.emit('attemptJoin', { username: 'USERNAME1', room: 'NEWROOM' });
      setTimeout(async () => {
        const room = await Room.findOne({ name: 'NEWROOM' });
        expect(room).not.toBeNull();
        expect(room.name).toEqual('NEWROOM');
        expect.assertions(2);
        setTimeout(() => {
          done();
        }, TIMEOUT_DURATION);
      }, 500);
    });
    it('should add a user to an existing room if room exists', (done) => {
      socket.emit('attemptJoin', { username: 'USERNAME1', room: 'NEWROOM' });
      setTimeout(() => {
        socket.emit('attemptJoin', { username: 'USERNAME2', room: 'NEWROOM' });
      }, 100);

      setTimeout(async () => {
        const room = await Room.findOne({ name: 'NEWROOM' });
        expect(room).not.toBeNull();
        expect(room.name).toEqual('NEWROOM');
        expect(room.users.length).toBe(2);
        expect.assertions(3);
        setTimeout(() => {
          done();
        }, TIMEOUT_DURATION);
      }, 500);
    });
  });
});

describe('gameStart event', () => {
  describe('Validates the user submitting the request', () => {
    it('should not proceed with game if incorrect user triggers game start event', async (done) => {
      socket.emit('gameStart', {}, (callback) => {
        expect(callback).toMatchObject(Error.incorrectUserStartGame);
      });

      expect.assertions(1);

      // Needed to prevent test timeout
      setTimeout(() => {
        done();
      }, TIMEOUT_DURATION);
    });
  });
});
