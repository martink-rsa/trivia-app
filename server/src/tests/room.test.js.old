const mongoose = require('mongoose');
require('../app');
const { setupDatabase } = require('./fixtures/db');

const Room = require('../models/room');
const User = require('../models/user');

const {} = require('../utils/user');
const { createRoom, findRoom } = require('../utils/room');

const { user0, user1, user2, roomOne } = require('./fixtures/db');

beforeEach(setupDatabase);

/* it("should create a new room if one doesn't exist", async () => {
  const adminId = new mongoose.Types.ObjectId();
  const room = {
    name: "MOCKROOM",
    admin: adminId,
    users: [],
    topic: "JavaScript",
  };
  createRoom(room);
}); */

describe('Rooms', () => {
  describe('finding rooms', () => {
    it('should get a room that exists', async () => {
      const roomName = roomOne.name;
      const room = await findRoom(roomName);
      expect(room.name).toBe(roomOne.name);
    });
    it('should return undefined if room does not exist', async () => {
      const roomName = 'mockroom';
      const room = await findRoom(roomName);
      expect(room).toBeNull();
    });
  });
  describe('creating rooms', () => {
    /* it("should create a room if it doesn't exist", async () => {
      const adminId = new mongoose.Types.ObjectId();
      const room = {
        name: "MOCKROOM",
        admin: adminId,
        users: [],
        topic: "JavaScript",
      };
      await createRoom(room);
      const newRoom = await findRoom(room.name);
      expect(newRoom.name).toEqual(room.name);
      expect(newRoom.admin).toEqual(room.admin);
      expect(newRoom.topic).toEqual(room.topic);
    });
    it("should not create a room if it exists", async () => {
      const adminId = new mongoose.Types.ObjectId();

      await createRoom(roomOne);
      const newRoom = await findRoom(roomOne.name);
      expect(newRoom).toBeNull();
    }); */
  });
});
